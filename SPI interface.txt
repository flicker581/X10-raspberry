SPI interface
=============

This file describes proposed X10 interface over SPI.

Host to module messages
-----------------------

typedef struct _spi_request {
	uint8_t request_code;
	uint8_t request_id;
	uint8_t data[SPI_BUFFER_SIZE-4];
	uint16_t crc16;
 } spi_request;

request_code should be:
	0		Empty request (poll)
	1		Cancel outstanding request
	2		Transmit X10 bitstream
	0xff	No request

#define X10_BITSTREAM_SIZE (SPI_BUFFER_SIZE - 4 - 1)

typedef struct _x10_bitstream {
	uint8_t stream_data[X10_BITSTREAM_SIZE];
	uint8_t stream_tail; // pointer to the bit after the stream
 } x10_bitstream;

typedef struct _spi_response {
	uint8_t response_code;
	uint8_t request_id;
	uint8_t data[SPI_BUFFER_SIZE-4];
	uint16_t crc16;
 } spi_response;

response_code is:
	0		No request
	1		Received
	2		In progress
	3		Complete
	0xff	No response

A request should be sent from host to module until the host receive 
ack for this request (code 1, 2 or 3). Module checks incoming request 
for integrity using CRC. Then the request is dispatched to processing. 
If it's ID is equal to the ID of last request, the request is ignored.
If ID is different, then it is a new request.

If there is a request in progress, then the new request can be queued. 
It allows for chaining several X10 transmissions together.

If the new request is "Cancel", then current and queued requests are
cancelled immediately, and the new request is ack'ed.
 
spi_rx_messages